import RPi.GPIO as GPIO
from imutils.video import VideoStream
from imutils import face_utils
from threading import Thread
import numpy as np
import argparse
import imutils
import serial 
import time
import dlib
from time import sleep
from urllib.request import urlopen
import webbrowser           #import package for opening link in browser
import sys                  #import system package
import urllib3
import cv2
import os

    ##def alarm(msg):
    ##    global alarm_status
    ##    global alarm_status2
    ##    global saying
    ##
    ##    while alarm_status:
    ##        print('call')
    ##        s = 'espeak "'+msg+'"'
    ##        os.system(s)
    ##
    ##    if alarm_status2:
    ##        print('call')
    ##        saying = True
    ##        s = 'espeak "' + msg + '"'
    ##        os.system(s)
    ##        saying = False

BASE_URL = "http://emblocation.wizzie.online/notify.php?"
#BASE_URL = "http://emblocation.wizzie.online/"

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)


m1= 8
alco_senor=10
TRIG = 16
ECHO = 18
i=0
buzz=3
led1=5
led2=11
vibr_sensor=7
voice=22

GPIO.setup(vibr_sensor,GPIO.IN)
GPIO.setup(voice,GPIO.OUT)
GPIO.setup(buzz,GPIO.OUT)
GPIO.setup(led1,GPIO.OUT)
GPIO.setup(led2,GPIO.OUT)
GPIO.setup(TRIG,GPIO.OUT)
GPIO.setup(ECHO,GPIO.IN)
GPIO.setup(alco_senor,GPIO.IN)
GPIO.setup(m1,GPIO.OUT)

GPIO.output(led1,GPIO.LOW)
GPIO.output(led2,GPIO.LOW)
GPIO.output(buzz,GPIO.LOW)
GPIO.output(m1,GPIO.LOW)
GPIO.output(voice,GPIO.HIGH)
GPIO.output(TRIG, False)

def euclidean_dist(ptA, ptB):
                                            # compute and return the euclidean distance between the two
                                            # points
        return np.linalg.norm(ptA - ptB)
def eye_aspect_ratio(eye):
        A = euclidean_dist(eye[1], eye[5])
        B = euclidean_dist(eye[2], eye[4])

        C = euclidean_dist(eye[0], eye[3])

        ear = (A + B) / (2.0 * C)

        return ear

def final_ear(shape):
        (lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
        (rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]

        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)

        ear = (leftEAR + rightEAR) / 2.0
        return (ear, leftEye, rightEye)

def lip_distance(shape):
        top_lip = shape[50:53]
        top_lip = np.concatenate((top_lip, shape[61:64]))

        low_lip = shape[56:59]
        low_lip = np.concatenate((low_lip, shape[65:68]))

        top_mean = np.mean(top_lip, axis=0)
        low_mean = np.mean(low_lip, axis=0)

        distance = abs(top_mean[1] - low_mean[1])
        return distance

def ultrasonic():
        GPIO.output(TRIG, True)
        time.sleep(0.00001)
        GPIO.output(TRIG, False)

        while GPIO.input(ECHO)==0:
                pulse_start = time.time()

        while GPIO.input(ECHO)==1:
                pulse_end = time.time()

        pulse_duration = pulse_end - pulse_start

        distance = pulse_duration * 17150

        distance = round(distance+1.15, 2)
       #print("distance:",distance,"cm")
        if distance<=5 and distance>=2:
                print ("gadget Detected")
                GPIO.output(m1,GPIO.HIGH)
                GPIO.output(led1,GPIO.HIGH)
                GPIO.output(led2,GPIO.HIGH)
                time.sleep(0.5)
                print("Recording Voice.....")

                GPIO.output(voice,GPIO.LOW)
          #i=1
          
        if distance>5:
                #and i==1
                print ("Please wear gadget")
                time.sleep(0.5)
                GPIO.output(m1,GPIO.LOW)
                for i in range (2):
                        
                        GPIO.output(led1,GPIO.HIGH)
                        GPIO.output(led2,GPIO.HIGH)
                        time.sleep(0.5)
                        GPIO.output(led1,GPIO.LOW)
                        GPIO.output(led2,GPIO.LOW)


def alcohol():
        if GPIO.input(alco_senor)==0:
                GPIO.output(m1,GPIO.LOW)
                for i in range (5):
                        GPIO.output(led1,GPIO.HIGH)
                        GPIO.output(led2,GPIO.HIGH)
                        time.sleep(0.5)
                        GPIO.output(led1,GPIO.LOW)
                        GPIO.output(led2,GPIO.LOW)
                print("Alcohol Detected")
                time.sleep(0.5)

        if GPIO.input(alco_senor)==1:
                print(" NO Alcohol Detected")
                time.sleep(0.5)

def GPS_Info():
        global NMEA_buff
        global lat_in_degrees
        global long_in_degrees
        global spd_in_kmphr
        global speed
        nmea_time = []
        nmea_latitude = []
        nmea_longitude = []
        nmea_speed = []
        nmea_time = NMEA_buff[0]                    #extract time from GPGGA string
        nmea_latitude = NMEA_buff[2]                #extract latitude from GPGGA string
        nmea_longitude = NMEA_buff[4]               #extract longitude from GPGGA string
        nmea_speed = NMEA_buff[6] 
            
        print("NMEA Time: ", nmea_time,'\n')
        print ("NMEA Latitude:", nmea_latitude,"NMEA Longitude:", nmea_longitude,"NMEA Speed:", nmea_speed,'\n')
            
        lat = float(nmea_latitude)                  #convert string into float for calculation
        longi = float(nmea_longitude)               #convertr string into float for calculation
        spd = float(nmea_speed) 
           
        lat_in_degrees = convert_to_degrees(lat)    #get latitude in degree decimal format
        long_in_degrees = convert_to_degrees(longi) #get longitude in degree decimal format
            #spd_in_kmphr = convert_to_degrees(spd)
        spd_in_kmphr = convert_to_kmhr(spd)

##    lat_in_degrees = convert_to_degrees(nmea_latitude)    #get latitude in degree decimal format
##    long_in_degrees = convert_to_degrees(nmea_longitude) #get longitude in degree decimal format
##    #spd_in_kmphr = convert_to_degrees(spd)
##    spd_in_kmphr = convert_to_kmhr(nmea_speed)
##    
#convert raw NMEA string into degree decimal format   
def convert_to_degrees(raw_value):
        decimal_value = raw_value/100.00
        degrees = int(decimal_value)
        mm_mmmm = (decimal_value - int(decimal_value))/0.6
        position = degrees + mm_mmmm
        position = "%.4f" %(position)
        return position


def convert_to_kmhr(value):
        new_value=value*1.852
        #val= new_value
        return new_value

        

    ##ap = argparse.ArgumentParser()
    ##ap.add_argument("-w", "--webcam", type=int, default=0,
    ##                help="index of webcam on system")
    ##args = vars(ap.parse_args())

EYE_AR_THRESH = 0.3
EYE_AR_CONSEC_FRAMES = 15
YAWN_THRESH = 30
    #alarm_status = False
    #alarm_status2 = False
    #saying = False
COUNTER = 0

print("-> Loading the predictor and detector...")
    #detector = dlib.get_frontal_face_detector()
detector = cv2.CascadeClassifier("/home/pi/Desktop/I Drive/haarcascade_frontalface_default.xml")    #Faster but less accurate
predictor = dlib.shape_predictor('/home/pi/Desktop/I Drive/shape_predictor_68_face_landmarks.dat')


print("-> Starting Video Stream")
vs = VideoStream(src=0).start()
    #vs= VideoStream(usePiCamera=True).start()       //For Raspberry Pi
time.sleep(1.0)

gpmrc_info = "$GPRMC,"
ser = serial.Serial ("/dev/ttyUSB0",9600,timeout=1)              #Open port with baud rate
GPMRC_buffer = 0
NMEA_buff = 0
lat_in_degrees = 0
long_in_degrees = 0
#spd_in_kmphr= spd*1.852
spd_in_kmphr=0

while True:
        frame = vs.read()
        frame = imutils.resize(frame, width=450)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        

        #rects = detector(gray, 0)
        rects = detector.detectMultiScale(gray, scaleFactor=1.1, 
                    minNeighbors=5, minSize=(30, 30),
                    flags=cv2.CASCADE_SCALE_IMAGE)


        #for rect in rects:
        for (x, y, w, h) in rects:
                rect = dlib.rectangle(int(x), int(y), int(x + w),int(y + h))
            
                shape = predictor(gray, rect)
                shape = face_utils.shape_to_np(shape)

                eye = final_ear(shape)
                ear = eye[0]
                leftEye = eye [1]
                rightEye = eye[2]

                distance = lip_distance(shape)

                leftEyeHull = cv2.convexHull(leftEye)
                rightEyeHull = cv2.convexHull(rightEye)
                cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
                cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)

                lip = shape[48:60]
                cv2.drawContours(frame, [lip], -1, (0, 255, 0), 1)
                cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                cv2.putText(frame, "YAWN: {:.2f}".format(distance), (300, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                if ear < EYE_AR_THRESH:
                        COUNTER += 1

                if COUNTER >= EYE_AR_CONSEC_FRAMES or distance > YAWN_THRESH :
                        
                    #if alarm_status == False:
                        #alarm_status = True
                        #t = Thread(target=alarm, args=('wake up sir',))
                        #t.deamon = True
                        #t.start()
                    
                        cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                        cv2.putText(frame, "Yawn Alert", (10, 60),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                               
                        GPIO.output(buzz,GPIO.HIGH)
                        for i in range (5):
                                GPIO.output(led1,GPIO.HIGH)
                                GPIO.output(led2,GPIO.HIGH)
                                time.sleep(0.5)
                                GPIO.output(led1,GPIO.LOW)
                                GPIO.output(led2,GPIO.LOW)
                            

                else:
                        COUNTER = 0
                        GPIO.output(buzz,GPIO.LOW)
                #alarm_status = False
            #cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30),
                           # cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2) 
            #if (distance > YAWN_THRESH):
                    #cv2.putText(frame, "Yawn Alert", (10, 30),
                               # cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                   # GPIO.output(buzz,GPIO.HIGH)
                    #if alarm_status2 == False and saying == False:
                     #   alarm_status2 = True
                      #  t = Thread(target=alarm, args=('take some fresh air sir',))
                       # t.deamon = True
                        #t.start()
            #alarm_status2 = False
            #else :
               # GPIO.output(buzz,GPIO.LOW)
                       
           # cv2.putText(frame, "YAWN: {:.2f}".format(distance), (300, 60),
                    #    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        received_data = (str)(ser.readline())                   #read NMEA string received
        GPMRC_data_available = received_data.find(gpmrc_info)   #check for NMEA GPGGA string                 
        if (GPMRC_data_available>0):
                GPMRC_buffer = received_data.split("$GPRMC,",1)[1]  #store data coming after "$GPGGA," string 
                NMEA_buff = (GPMRC_buffer.split(','))                

        ultrasonic()
        time.sleep(0.5)
        alcohol()
        if GPIO.input(vibr_sensor)==0:
                print("Accident....")
                GPS_Info()
                print("lat in degrees:", lat_in_degrees," long in degree: ", long_in_degrees, " speed in km/hr: ", spd_in_kmphr, '\n')
##                print("<<<<<<<<press ctrl+c to plot location on google maps>>>>>>\n")               #press ctrl+c to plot on map and exit 
##                print("------------------------------------------------------------\n")

            
                hom = 'http://emblocation.wizzie.online/notify.php?'+'lat='+str(lat_in_degrees)+'&&lng='+ str(long_in_degrees) +'&&spd='+str(spd_in_kmphr)#+'&&id=user1'
                http = urllib3.PoolManager()
                resp = http.request('GET', hom)
                print(resp.status)
                print(hom)
        
                print("sent")
                
               


        if GPIO.input(vibr_sensor)==0:
                print("Safe Driving")


        

        
        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("q"):
            break

cv2.destroyAllWindows()
vs.stop()

